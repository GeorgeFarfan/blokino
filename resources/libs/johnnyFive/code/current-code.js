'use strict';const jc = require('json-cycle'),chalk = require('chalk'),log = console.log;let five = require('johnny-five');try {let board = new five.Board({ port:'/dev/ttyACM0', repl: false, debug: false});board.on('ready', function () { try {var MATRIX_LEDS;function EscribirMensaje() {MATRIX_LEDS.custom.code = "heart";MATRIX_LEDS.on();MATRIX_LEDS.draw(["01100110","10011001","10000001","10000001","01000010","00100100","00011000","00000000"]);}MATRIX_LEDS = (new five.Led.Matrix({pins:{data:2,clock:4,cs:3,custom:{type:'SCREEN-MATRIX',code:''}}}));EscribirMensaje();process.send(JSON.stringify({type:'Exito', description:'El programa se ejecut√≥ correctamente', code: jc.decycle()}))} catch(error){process.send(JSON.stringify({type:'Error', description:error.toString()}))}});board.on('error', function(err) {process.send(JSON.stringify({ type: 'ErrorJ5', description: err.class}));});board.on('exit', function(event) {log(chalk.black.bgRed.bold('EXIT - Arduino device was disconnected...')); });board.on('message', function (event) {log(chalk.black.bgYellow.bold('MESSAGE - you receive a message: ', event.type, event.class, event.message));});board.on('info', function (event) {log(chalk.black.bgYellow.bold('INFORMATION - you receive a information message: ', event.class, event.message));});board.on('fail', function(event) {log(chalk.black.bgYellow.bold('ERROR - you receive a fail message: ', event.class, event.message));});board.on('warn', function(event) {log(chalk.black.bgYellow.bold('WARNING - you receive a warn message: ', event.class, event.message));});} catch (error) {process.send(JSON.stringify({ type: 'Error', description: error.toString() }));}